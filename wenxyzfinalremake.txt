--wenxyzlua final remake

repeat wait() until game:IsLoaded()

game:GetService("CorePackages").Packages:Destroy()

assert(getrawmetatable)
grm = getrawmetatable(game)
setreadonly(grm, false)
old = grm.__namecall
grm.__namecall = newcclosure(function(self, ...)
    local args = {...}
    if tostring(args[1]) == "TeleportDetect" then
        return
    elseif tostring(args[1]) == "CHECKER_1" then
        return
    elseif tostring(args[1]) == "CHECKER" then
        return
    elseif tostring(args[1]) == "GUI_CHECK" then
        return
    elseif tostring(args[1]) == "OneMoreTime" then
        return
    elseif tostring(args[1]) == "checkingSPEED" then
        return
    elseif tostring(args[1]) == "BANREMOTE" then
        return
    elseif tostring(args[1]) == "PERMAIDBAN" then
        return
    elseif tostring(args[1]) == "KICKREMOTE" then
        return
    elseif tostring(args[1]) == "BR_KICKPC" then
        return
    elseif tostring(args[1]) == "BR_KICKMOBILE" then
        return
    end
    return old(self, ...)
end)

local ScreenGui = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local TextButton = Instance.new("TextButton")
local UITextSizeConstraint = Instance.new("UITextSizeConstraint")

--Properties:

ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(90, 90, 90)
Frame.BackgroundTransparency = 0
Frame.Position = UDim2.new(0.858712733, 0, 0.0237762257, 0)
Frame.Size = UDim2.new(0, 100, 0, 50)

TextButton.Parent = Frame
TextButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextButton.BackgroundTransparency = 1.000
TextButton.Size = UDim2.new(1, 0, 1, 0)
TextButton.Font = Enum.Font.SourceSans
TextButton.Text = "wen"
TextButton.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton.TextScaled = true
TextButton.TextSize = 30
TextButton.TextStrokeColor3 = Color3.fromRGB(255, 255, 255)
TextButton.TextStrokeTransparency = 0.000
TextButton.TextWrapped = true
TextButton.MouseButton1Down:Connect(function()
	game:GetService("VirtualInputManager"):SendKeyEvent(true, "V" , false , game)
end)

UITextSizeConstraint.Parent = TextButton
UITextSizeConstraint.MaxTextSize = 30

local player = game.Players.LocalPlayer

-- Function to show the GUI when the character respawns
local function onCharacterAdded(character)
    ScreenGui.Parent = player.PlayerGui
end

-- Function to connect character respawn event
local function connectCharacterAdded()
    player.CharacterAdded:Connect(onCharacterAdded)
end

-- Connect the CharacterAdded event
connectCharacterAdded()

-- Keep the GUI visible when the character dies
player.CharacterRemoving:Connect(function()
    ScreenGui.Parent = nil
end)

getgenv().keytoclick = "Q"
tool = Instance.new("Tool")
tool.RequiresHandle = false
tool.Name ="Arabic Tool"
tool.Activated:connect(function()
    local vim = game:service("VirtualInputManager")
vim:SendKeyEvent(true, keytoclick, false, game)
end)
tool.Parent = game.Players.LocalPlayer.Backpack

local player = game.Players.LocalPlayer

local function connectCharacterAdded()
    player.CharacterAdded:Connect(onCharacterAdded)
end

connectCharacterAdded()

player.CharacterRemoving:Connect(function()
    tool.Parent = game.Players.LocalPlayer.Backpack
end)

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/cat"))() --you can go into the github link and copy all of it and modify it for yourself.

local players = game:GetService("Players")
local uis = game:GetService("UserInputService")
local runservice = game:GetService("RunService")
local tweenservice = game:GetService("TweenService")
local marketplaceservice = game:GetService("MarketplaceService")
local textservice = game:GetService("TextService")
local coregui = game:GetService("CoreGui")
local httpservice = game:GetService("HttpService")

local player = players.LocalPlayer
local mouse = player:GetMouse()
local camera = game.Workspace.CurrentCamera

Library.theme.topheight = 50
Library.theme.accentcolor = Color3.fromRGB(149,0,255)
Library.theme.accentcolor2 = Color3.fromRGB(149,0,255)
Library.theme.fontsize = 18
Library.theme.titlesize = 17
Library.theme.cursor = true
local Window = Library:CreateWindow("wenxyz.lua", Vector2.new(460, 460), Enum.KeyCode.V)
local NotifyLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/Kinlei/Dynissimo/main/Scripts/AkaliNotif.lua"))()
local Notify = NotifyLibrary.Notify
local AimingTab = Window:CreateTab("Aiming")
local MiscTab = Window:CreateTab("Misc")
local ConfigTab = Window:CreateTab("Config")

local TargetLockSection = AimingTab:CreateSector("Target Aim", "left") 

local Version = {
    Value = "0.0.2"
}

local target_aim = {
    Aiming = {
        Target = {
            Enabled = nil,
            Key = Enum.KeyCode.Q,
            Prediction = nil,
            Radius = nil,
            TargetPart = nil,
            Alerts = nil,
            AntiGroundShots = nil,
            JumpOffset = nil,
            TargetStats = nil,
            LookAt = nil
        }
    }
}

TargetLockSection:AddToggle("Enabled", false, function(parameter)
    target_aim.Aiming.Target.Enabled = parameter
end)

TargetLockSection:AddTextbox("Prediction", nil, function(State)
    target_aim.Aiming.Target.Prediction = State
end)

TargetLockSection:AddTextbox("Offset", nil, function(State)
    OriginalOffsetXDZX = State
end)

spawn(function()
    runservice.Stepped:Connect(function()
        if AZURE_TmKALRSX.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall then
            target_aim.Aiming.Target.JumpOffset = OriginalOffsetXDZX
        else
            target_aim.Aiming.Target.JumpOffset = 0
        end
    end)
end)

TargetLockSection:AddDropdown("Hit-Part", {"Head", "HumanoidRootPart", "UpperTorso", "LowerTorso"}, "HumanoidRootPart", false, function(dropdown)
    hit_partxd = dropdown
end)

TargetLockSection:AddToggle("Randomized HitParts", false, function(parameter)
    randomizatxionxd = parameter
end)

TargetLockSection:AddToggle("Notifications", false, function(parameter)
    target_aim.Aiming.Target.Alerts = parameter
end)

TargetLockSection:AddToggle("Look At", false, function(parameter)
    target_aim.Aiming.Target.LookAt = parameter
end)

TargetLockSection:AddToggle("View At", false, function(parameter)
    viewatxd = parameter
end)
      
TargetLockSection:AddToggle("Activate Resolver", false, function(first)
  getgenv().Aimbot.Resolver = first
   end)

TargetLockSection:AddDropdown("Resolver Types", {"Humanoid MoveDirection", "Delta Time"}, "Delta Time", false, function(dropdown)
    getgenv().Aimbot.ResolverOption = dropdown
end)

spawn(function()
    runservice.Stepped:Connect(function()
        if target_aim.Aiming.Target.Enabled and viewatxd and TargetAimEnabled then
            workspace.CurrentCamera.CameraSubject = AZURE_TmKALRSX.Character.Humanoid
            spawn(function()
                if viewatxd == false then
                    workspace.CurrentCamera.CameraSubject = player.Character.Humanoid
                end
            end)
        else
            workspace.CurrentCamera.CameraSubject = player.Character.Humanoid
        end
    end)
end)

spawn(function()
    runservice.Stepped:Connect(function()
        if target_aim.Aiming.Target.Enabled and getgenv().Aimbot.Resolver and getgenv().Aimbot.ResolverOption == "Humanoid MoveDirection" and TargetAimEnabled then
args[3] = Plr.Character[target_aim.Aiming.Target.TargetPart].Position+(AZURE_TmKALRSX.Character.Humanoid.MoveDirection*target_aim.Aiming.Target.Prediction*AZURE_TmKALRSX.Character.Humanoid.WalkSpeed)
end
end)
end)

spawn(function()
    runservice.Stepped:Connect(function()
 if target_aim.Aiming.Target.Enabled and target_aim.Aiming.Target.AntiGroundShots and TargetAimEnabled then
local TargetCharacter5 = AZURE_TmKALRSX.Character
local TargetVelv5 = TargetCharacter5:FindFirstChild(target_aim.Aiming.Target.TargetPart)

TargetVelv5.Velocity = Vector3.new(TargetVelv5.Velocity.X, math.abs(TargetVelv5.Velocity.Y * 0.2), TargetVelv5.Velocity.Z)
TargetVelv5.AssemblyLinearVelocity = Vector3.new(TargetVelv5.Velocity.X, (TargetVelv5.Velocity.Y * 0.2), TargetVelv5.Velocity.Z)
TargetVel5.Velocity = newVelocity
TargetVel5.AssemblyLinearVelocity = newVelocity
end
end)
end)

TargetLockSection:AddToggle("Anti Ground Shots", false, function(parameter)
    AntiGroundShots = parameter
end)

local dotenabled = TargetLockSection:AddToggle("Dot", false, function(parameter)
    dotenabledlol = parameter
end)

dotenabled:AddColorpicker(Color3.fromRGB(149,0,255), function(ztx)
    colorxdlololxdxd = ztx
end)

TargetLockSection:AddToggle("Dot on Cursor", false, function(parameter)
    dotoncursorx = parameter
end)

local highlighxdxdxd = TargetLockSection:AddToggle("Highlight", false, function(parameter)
    hightlightendalbed = parameter
end)

highlighxdxdxd:AddColorpicker(Color3.fromRGB(149,0,255), function(ztx)
    fillcolorxd = ztx
end)

highlighxdxdxd:AddColorpicker(Color3.fromRGB(102,0,204), function(ztx)
    outlinecolorxdxdxd = ztx
end)

local highlight_instance = Instance.new("Highlight",game.CoreGui)

spawn(function()
    runservice.Stepped:Connect(function()
        if target_aim.Aiming.Target.Enabled and hightlightendalbed and TargetAimEnabled then
            highlight_instance.Parent = AZURE_TmKALRSX.Character
            highlight_instance.FillColor = fillcolorxd
            highlight_instance.OutlineColor = outlinecolorxdxdxd
            spawn(function()
                if hightlightendalbed == false then
                    highlight_instance.Parent = game.CoreGui
                end
            end)
        else
            highlight_instance.Parent = game.CoreGui
        end
    end)
end)

TargetLockSection:AddToggle("Stats", false, function(parameter)
    target_aim.Aiming.Target.TargetStats = parameter
end)



local dotDrawing = Drawing.new("Circle")

spawn(function()
    dotDrawing.Filled = true
    dotDrawing.Visible = false
    dotDrawing.Thickness = 2
    dotDrawing.Radius =	7
    dotDrawing.NumSides = 60
end)

local DotParent = Instance.new("Part",game.Workspace)
local newBillboard = Instance.new("BillboardGui", DotParent)

local newFrame = Instance.new("Frame", newBillboard)
local newUiCornor = Instance.new("UICorner", newFrame)

task.spawn(function ()
    newBillboard.Name = "azure_billboarddot"
    newBillboard.Adornee = DotParent
    newBillboard.Size = UDim2.new(0.6, 0, 0.6, 0)
    newBillboard.AlwaysOnTop = true
    newFrame.Size = UDim2.new(1, 0, 1, 0)
    newFrame.BackgroundTransparency = 0
    newUiCornor.CornerRadius = UDim.new(50, 50)
    DotParent.CanCollide = false
    DotParent.Anchored = true
    DotParent.CFrame = CFrame.new(0,2000,0)
    DotParent.Transparency = 1
end)

spawn(function()
    runservice.Stepped:Connect(function()
        if target_aim.Aiming.Target.Enabled and dotenabledlol then
            dotDrawing.Color = colorxdlololxdxd
            newFrame.BackgroundColor3 = colorxdlololxdxd
            if TargetAimEnabled and dotenabledlol then
                DotParent.CFrame = CFrame.new(AZURE_TmKALRSX.Character[target_aim.Aiming.Target.TargetPart].Position+Vector3.new(0,target_aim.Aiming.Target.JumpOffset,0)+(AZURE_TmKALRSX.Character[target_aim.Aiming.Target.TargetPart].Velocity*target_aim.Aiming.Target.Prediction))
                dotDrawing.Visible = false
            else
                DotParent.CFrame = CFrame.new(0,9999,0)
                if dotoncursorx then
                    dotDrawing.Visible = true
                    dotDrawing.Position = Vector2.new(mouse.X,mouse.Y + game:GetService("GuiService"):GetGuiInset().Y)
                    spawn(function()
                        if dotoncursorx == false then
                            dotDrawing.Visible = false
                        end
                    end)
                end
                spawn(function()
                    if dotoncursorx == false then
                        dotDrawing.Visible = false
                    end
                end)
            end
        else
            DotParent.CFrame = CFrame.new(0,9999,0)
            dotDrawing.Visible = false
        end
    end)
end)


spawn(function()
    runservice.Stepped:Connect(function()
        if randomizatxionxd then
            wait(50)
            player_gayparts = {"Head","UpperTorso","LowerTorso","HumanoidRootPart","RightUpperArm","LeftUpperArm"}
            target_aim.Aiming.Target.TargetPart = player_gayparts[math.random(1,#player_gayparts)]
        else
            target_aim.Aiming.Target.TargetPart = hit_partxd
        end
    end)
end)

spawn(function()
    runservice.RenderStepped:Connect(function()
        if TargetAimEnabled and target_aim.Aiming.Target.Enabled and AZURE_TmKALRSX.Character:FindFirstChild("UpperTorso") then
            if target_aim.Aiming.Target.LookAt then
                player.Character.HumanoidRootPart.CFrame = CFrame.new(player.Character.HumanoidRootPart.CFrame.Position, Vector3.new(AZURE_TmKALRSX.Character.HumanoidRootPart.CFrame.X, player.Character.HumanoidRootPart.CFrame.Position.Y, AZURE_TmKALRSX.Character.HumanoidRootPart.CFrame.Z))
                player.Character.Humanoid.AutoRotate = false
                spawn(function ()
                    if target_aim.Aiming.Target.LookAt == false then
                        player.Character.Humanoid.AutoRotate = true
                    end
                end)
            end
        else
            spawn(function()
                player.Character.Humanoid.AutoRotate = true
            end)
        end
    end)
end)

spawn(function()
    uis.InputBegan:Connect(function (input)
        if input.KeyCode == target_aim.Aiming.Target.Key and target_aim.Aiming.Target.Enabled then
            TargetAimEnabled = not TargetAimEnabled   
            if TargetAimEnabled then
                AZURE_TmKALRSX = targetchosen()
                if target_aim.Aiming.Target.Alerts then
                    Notify({
                        Title = "wenxyz.lua (Target Aim)",
                        Description = "Targeting: " ..tostring(AZURE_TmKALRSX.Character.Humanoid.DisplayName),
                        Duration = 3
                    })
                end
            elseif not TargetAimEnabled then
                if target_aim.Aiming.Target.Alerts then
                    Notify({
                        Title = "wenxyz.lua (Target Aim)",
                        Description = "Untargeting: " ..tostring(AZURE_TmKALRSX.Character.Humanoid.DisplayName),
                        Duration = 3
                    })
                end
            end
        end
    end)
end)

local mt = getrawmetatable(game)
local old = mt.__namecall
setreadonly(mt, false)
mt.__namecall = newcclosure(function(...)
    local args = {...}
    if target_aim.Aiming.Target.Enabled and TargetAimEnabled and getnamecallmethod() == "FireServer" and args[2] == "UpdateMousePos" then
        args[3] = AZURE_TmKALRSX.Character[target_aim.Aiming.Target.TargetPart].Position+Vector3.new(0.01,target_aim.Aiming.Target.JumpOffset,0.01)+(AZURE_TmKALRSX.Character[target_aim.Aiming.Target.TargetPart].Velocity*target_aim.Aiming.Target.Prediction)
        return old(unpack(args))
    end
    return old(...)
end)

local Azure_TargetStats = Instance.new("ScreenGui")
local Background = Instance.new("Frame")
local Picture = Instance.new("ImageLabel")
local Top = Instance.new("Frame")
local UIGradient = Instance.new("UIGradient")
local UIGradient_2 = Instance.new("UIGradient")
local HealthBarBackground = Instance.new("Frame")
local UIGradient_3 = Instance.new("UIGradient")
local HealthBar = Instance.new("Frame")
local UIGradient_4 = Instance.new("UIGradient")
local NameOfTarget = Instance.new("TextLabel")

spawn(function()
Azure_TargetStats.Name = "Azure_TargetStats"
Azure_TargetStats.Parent = game.CoreGui
Azure_TargetStats.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

Background.Name = "Background"
Background.Parent = Azure_TargetStats
Background.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Background.BorderSizePixel = 0
Background.Position = UDim2.new(0.388957828, 0, 0.700122297, 0)
Background.Size = UDim2.new(0, 358, 0, 71)
Background.Visible = false

Picture.Name = "Picture"
Picture.Parent = Background
Picture.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Picture.BorderSizePixel = 0
Picture.Position = UDim2.new(0.0279329624, 0, 0.0704225376, 0)
Picture.Size = UDim2.new(0, 59, 0, 59)
Picture.Transparency = 1
Picture.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"

Top.Name = "Top"
Top.Parent = Background
Top.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Top.BorderSizePixel = 0
Top.Position = UDim2.new(0, 0, -0.101449274, 0)
Top.Size = UDim2.new(0, 358, 0, 7)

UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(149,0,255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(149,0,255))}
UIGradient.Rotation = 90
UIGradient.Parent = Top

UIGradient_2.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(102,0,204)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(102,0,204))}
UIGradient_2.Rotation = 90
UIGradient_2.Parent = Background

HealthBarBackground.Name = "HealthBarBackground"
HealthBarBackground.Parent = Background
HealthBarBackground.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
HealthBarBackground.BorderSizePixel = 0
HealthBarBackground.Position = UDim2.new(0.215083793, 0, 0.348234326, 0)
HealthBarBackground.Size = UDim2.new(0, 270, 0, 19)
HealthBarBackground.Transparency = 1

UIGradient_3.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(0,0,0)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0,0,0))}
UIGradient_3.Rotation = 90
UIGradient_3.Parent = HealthBarBackground

HealthBar.Name = "HealthBar"
HealthBar.Parent = HealthBarBackground
HealthBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
HealthBar.BorderSizePixel = 0
HealthBar.Position = UDim2.new(-0.00336122862, 0, 0.164894029, 0)
HealthBar.Size = UDim2.new(0, 130, 0, 19)

UIGradient_4.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(0,255,0)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0,204,0))}
UIGradient_4.Rotation = 90
UIGradient_4.Parent = HealthBar

NameOfTarget.Name = "NameOfTarget"
NameOfTarget.Parent = Background
NameOfTarget.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
NameOfTarget.BackgroundTransparency = 1.000
NameOfTarget.Position = UDim2.new(0.220670387, 0, 0.0704225376, 0)
NameOfTarget.Size = UDim2.new(0, 268, 0, 19)
NameOfTarget.Font = Enum.Font.Code
NameOfTarget.TextColor3 = Color3.fromRGB(255, 255, 255)
NameOfTarget.TextScaled = true
NameOfTarget.TextSize = 14.000
NameOfTarget.TextStrokeTransparency = 0.000
NameOfTarget.TextWrapped = true
end)

local IsAlive = function(GetPlayer)
    return GetPlayer and GetPlayer.Character and GetPlayer.Character:FindFirstChild("HumanoidRootPart") ~= nil and GetPlayer.Character:FindFirstChild("Humanoid") ~= nil and GetPlayer.Character:FindFirstChild("Head") ~= nil and true or false
end

spawn(function()
    while wait() do
        if target_aim.Aiming.Target.TargetStats and target_aim.Aiming.Target.Enabled and TargetAimEnabled then
            if AZURE_TmKALRSX and IsAlive(AZURE_TmKALRSX) then
                Background.Visible = true
                NameOfTarget.Text = tostring(AZURE_TmKALRSX.Character.Humanoid.DisplayName).." ["..tostring(AZURE_TmKALRSX.Name).."]"
                Picture.Image  = "rbxthumb://type=AvatarHeadShot&id=" ..AZURE_TmKALRSX.UserId.. "&w=420&h=420"
                HealthBar:TweenSize(UDim2.new(AZURE_TmKALRSX.Character.Humanoid.Health / AZURE_TmKALRSX.Character.Humanoid.MaxHealth, 0, 1, 0), "In", "Linear", 0.25)
                spawn(function()
                    if target_aim.Aiming.Target.TargetStats == false then
                        Background.Visible = false
                    end
                end)
            end
        else
            Background.Visible = false
        end
    end
end)

function targetchosen()
    local distance = math.huge
    local zclosest
    local LocalPlayer = game.Players.LocalPlayer
    for i, v in pairs(game.Players:GetPlayers()) do
        if v ~= LocalPlayer and v.Character and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health ~= 0 and v.Character:FindFirstChild("HumanoidRootPart") then
            local pos = workspace.CurrentCamera:WorldToViewportPoint(v.Character.PrimaryPart.Position)
            local magnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(LocalPlayer:GetMouse().X, LocalPlayer:GetMouse().Y)).magnitude
            if magnitude < distance then
                zclosest = v
                distance = magnitude
            end
        end
    end
    return zclosest
end

local testSection1 = AimingTab:CreateSector("Aim Assist", "right") 
getgenv().Aimbot = { 
          Enabled = false,
          Smoothness = 0,
          Smoothing = false,
          AirshotFunc = false,
          AirshotPart = "RightFoot",
          AimPart = "HumanoidRootPart",
          Randomize = false,
          Resolver = false,
          ResolverOption = "Delta Time",
          Predicting = 1,
          Key = Enum.KeyCode.Q,
          Toggled
      }
      
      
      function x(tt,tx,cc)
          game.StarterGui:SetCore("SendNotification", {
              Title = tt;
              Text = tx;
              Duration = cc;
              Icon = "rbxthumb://type=Asset&id=7262533709&w=150&h=150";
          })
      end
      
      local CurrentCamera = game:GetService("Workspace").CurrentCamera
      local RunService = game:GetService("RunService")
      local Mouse = game.Players.LocalPlayer:GetMouse()
      local LocalPlayer = game.Players.LocalPlayer
      local Plr
      
      function FindClosestPlayer()
          local ClosestDistance, ClosestPlayer = math.huge, nil;
          for _, Player in next, game:GetService("Players"):GetPlayers() do
              local ISNTKNOCKED = Player.Character:WaitForChild("BodyEffects")["K.O"].Value ~= true
              local ISNTGRABBED = Player.Character:FindFirstChild("GRABBING_COINSTRAINT") == nil
      
              if Player ~= LocalPlayer then
                  local Character = Player.Character
                  if Character and Character.Humanoid.Health > 1 and ISNTKNOCKED and ISNTGRABBED then
                      local Position, IsVisibleOnViewPort = CurrentCamera:WorldToViewportPoint(Character.HumanoidRootPart
                                                                                                   .Position)
                      if IsVisibleOnViewPort then
                          local Distance = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(Position.X, Position.Y)).Magnitude
                          if Distance < ClosestDistance then
                              ClosestPlayer = Player
                              ClosestDistance = Distance
                          end
                      end
                  end
              end
          end
          return ClosestPlayer, ClosestDistance
      end
      
          game:GetService("UserInputService").InputBegan:Connect(function(keygo)
                 if (keygo.KeyCode == getgenv().Aimbot.Key) then
                     Toggled = not Toggled
                     if Toggled then
                     Plr =  FindClosestPlayer()
      end
               end
                 
      end)
      game:GetService("RunService").RenderStepped:Connect(function()
      if getgenv().Aimbot.Smoothing and getgenv().Aimbot.Enabled and Toggled == true then
          local Main = CFrame.new(workspace.CurrentCamera.CFrame.p, Plr.Character[getgenv().Aimbot.AimPart].Position + Plr.Character[getgenv().Aimbot.AimPart].Velocity*getgenv().Aimbot.Predicting)
                                       workspace.CurrentCamera.CFrame = workspace.CurrentCamera.CFrame:Lerp(Main, getgenv().Aimbot.Smoothness, Enum.EasingStyle[smoothingtypexd], Enum.EasingDirection[easingdirectionxdxlol])
                                  elseif getgenv().Aimbot.Smoothing == false and getgenv().Aimbot.Enabled and Toggled == true then
          workspace.CurrentCamera.CFrame = CFrame.new(workspace.CurrentCamera.CFrame.Position, Plr.Character[getgenv().Aimbot.AimPart].Position + Plr.Character[getgenv().Aimbot.AimPart].Velocity*getgenv().Aimbot.Predicting)
                                  end
      
      end)
      
      spawn(function()
    runservice.Stepped:Connect(function()
        if getgenv().Aimbot.Randomize then
            wait(0.5)
            player_gayparts = {"Head","UpperTorso","LowerTorso","HumanoidRootPart","RightUpperArm","LeftUpperArm"}
            getgenv().Aimbot.AimPart = player_gayparts[math.random(1,#player_gayparts)]
        else
            getgenv().Aimbot.AimPart = getgenv().Aimbot.AimPart
        end
    end)
end)

      function calculateVelocity(initialPos, finalPos, timeInterval)
    local displacement = finalPos - initialPos
    local velocity = displacement / timeInterval
    return velocity
    end
   
 
    game:GetService('RunService').RenderStepped:connect(function(deltaTime)
    if Plr.Character ~= nil and getgenv().Aimbot.Resolver == true and getgenv().Aimbot.ResolverOption == "Delta Time" then
        local character = Plr.Character[target_aim.Aiming.Target.TargetPart]
        local lastPosition = character.Position
            task.wait()
        local currentPosition = character.Position
        local velocity = calculateVelocity(lastPosition, currentPosition, deltaTime)
        character.AssemblyLinearVelocity = velocity
        character.Velocity = velocity
            lastPosition = currentPosition
        end
    end)
    
      if getgenv().Aimbot.AirshotFunc == true then
          
                      if Plr.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall then
                          getgenv().Aimbot.AimPart = getgenv().Aimbot.AirshotPart
                      else
                                  getgenv().Aimbot.AimPart = getgenv().Aimbot.AimPart
                              end
                          end
    
      testSection1:AddToggle("Enabled", false, function(first)
        getgenv().Aimbot.Enabled = first
        end)

        testSection1:AddTextbox("Prediction", nil, function(Pred)
          getgenv().Aimbot.Predicting  = Pred
          end)
    
      testSection1:AddDropdown("Aim-Part", {"Head", "UpperTorso", "HumanoidRootPart", "LowerTorso","RightFoot"}, "HumanoidRootPart", false, function(dropdown)
    getgenv().Aimbot.AimPart = dropdown
   end)
   
   testSection1:AddToggle("Randomize AimPart", false, function(first)
            getgenv().Aimbot.Randomize = first
            end)
            
   testSection1:AddToggle("Smoothing", false, function(first)
            getgenv().Aimbot.Smoothing = first
            end)
            
      testSection1:AddTextbox("Smoothing", nil, function(Smooth)
                getgenv().Aimbot.Smoothness  = Smooth
                end)
    
       testSection1:AddDropdown("Smoothing Style", {"Linear", "Sine", "Back", "Quad","Quart", "Quint", "Bounce", "Elastic","Exponential", "Circular", "Cubic"}, "Linear", false, function(dropdown)
    smoothingtypexd = dropdown
end)

testSection1:AddDropdown("Smoothing Direction", {"In", "Out", "InOut"}, "InOut", false, function(dropdown)
    easingdirectionxdxlol = dropdown
end)

     testSection1:AddToggle("Jump Part", false, function(first)
        getgenv().Aimbot.AirshotFunc = first
        end)
        
            testSection1:AddDropdown("Jump Part Value", {"Head", "UpperTorso", "HumanoidRootPart", "LowerTorso", "RightFoot"}, "RightFoot", false, function(dropdown)
                        getgenv().Aimbot.AirshotPart = dropdown
                        end)
                        
   ConfigTab:CreateConfigSystem("left")